/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LatticeForm.java
 *
 * Created on Nov 22, 2011, 5:38:26 PM
 */
package latticetestwork;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mewer12
 */
public class LatticeForm extends javax.swing.JFrame {

    public LatticeTestworkView parent = null;
    public DefaultListModel<NCell> modelCells = null;
    public DefaultListModel<NFace> modelFaces = null;
    public DefaultListModel<NFace> modelIncompleteFaces = null;
    public DefaultListModel<NPoint> modelPoints = null;

    /** Creates new form LatticeForm */
    public LatticeForm(LatticeTestworkView parent) {
        this.parent = parent;
        initComponents();
        modelCells = new DefaultListModel<NCell>();
        listCells.setModel(modelCells);
        modelFaces = new DefaultListModel<NFace>();
        listFaces.setModel(modelFaces);
        modelIncompleteFaces = new DefaultListModel<NFace>();
        listIncompleteFaces.setModel(modelIncompleteFaces);
        modelPoints = new DefaultListModel<NPoint>();
        listPoints.setModel(modelPoints);

        btnRefreshActionPerformed(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane5 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFaces = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listIncompleteFaces = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPoints = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listCells = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        btnClearSelections = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setName("Form"); // NOI18N

        jSplitPane5.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane5.setName("jSplitPane5"); // NOI18N

        jSplitPane1.setDividerLocation(70);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(latticetestwork.LatticeTestworkApp.class).getContext().getResourceMap(LatticeForm.class);
        jSplitPane2.setBackground(resourceMap.getColor("jSplitPane2.background")); // NOI18N
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jSplitPane3.setMinimumSize(new java.awt.Dimension(115, 62));
        jSplitPane3.setName("jSplitPane3"); // NOI18N

        jSplitPane4.setDividerLocation(170);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setName("jSplitPane4"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel2.add(jLabel1);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listFaces.setName("listFaces"); // NOI18N
        jScrollPane1.setViewportView(listFaces);

        jPanel2.add(jScrollPane1);

        jSplitPane4.setTopComponent(jPanel2);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel3.add(jLabel2);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        listIncompleteFaces.setName("listIncompleteFaces"); // NOI18N
        jScrollPane2.setViewportView(listIncompleteFaces);

        jPanel3.add(jScrollPane2);

        jSplitPane4.setRightComponent(jPanel3);

        jSplitPane3.setLeftComponent(jSplitPane4);

        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel4.add(jLabel3);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        listPoints.setName("listPoints"); // NOI18N
        jScrollPane3.setViewportView(listPoints);

        jPanel4.add(jScrollPane3);

        jSplitPane3.setRightComponent(jPanel4);

        jSplitPane2.setRightComponent(jSplitPane3);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        listCells.setName("listCells"); // NOI18N
        listCells.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCellsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listCells);

        jPanel1.add(jScrollPane4);

        jSplitPane2.setLeftComponent(jPanel1);

        jSplitPane1.setBottomComponent(jSplitPane2);

        jPanel5.setName("jPanel5"); // NOI18N

        btnClearSelections.setText(resourceMap.getString("btnClearSelections.text")); // NOI18N
        btnClearSelections.setName("btnClearSelections"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        btnRefresh.setText(resourceMap.getString("btnRefresh.text")); // NOI18N
        btnRefresh.setName("btnRefresh"); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel5))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 813, Short.MAX_VALUE)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClearSelections)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClearSelections)
                            .addComponent(btnRefresh))))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel5);

        jSplitPane5.setLeftComponent(jSplitPane1);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel6.setName("jPanel6"); // NOI18N

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane5.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(766, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel6.TabConstraints.tabTitle"), jPanel6); // NOI18N

        jPanel7.setName("jPanel7"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1074, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel7.TabConstraints.tabTitle"), jPanel7); // NOI18N

        jPanel8.setName("jPanel8"); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1074, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel8.TabConstraints.tabTitle"), jPanel8); // NOI18N

        jSplitPane5.setRightComponent(jTabbedPane1);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 638, Short.MAX_VALUE))
        );

        setBounds(1000, 50, 1140, 679);
    }// </editor-fold>//GEN-END:initComponents

private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
    if ((parent.engine != null) && (parent.engine.lattice != null)) {
        modelCells.clear();
        for (int i = 0; i < parent.engine.lattice.cells.size(); i++) {
            modelCells.addElement(parent.engine.lattice.cells.get(i));
        }
        modelFaces.clear();
        for (int i = 0; i < parent.engine.lattice.faces.size(); i++) {
            modelFaces.addElement(parent.engine.lattice.faces.get(i));
        }
        modelIncompleteFaces.clear();
        for (int i = 0; i < parent.engine.lattice.incompleteFaces.size(); i++) {
            modelIncompleteFaces.addElement(parent.engine.lattice.incompleteFaces.get(i));
        }
        modelPoints.clear();
        for (int i = 0; i < parent.engine.lattice.points.size(); i++) {
            modelPoints.addElement(parent.engine.lattice.points.get(i));
        }
    }
}//GEN-LAST:event_btnRefreshActionPerformed

private void listCellsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCellsValueChanged
    if (parent.engine != null) {
    }
}//GEN-LAST:event_listCellsValueChanged
    public JFileChooser chooser = new JFileChooser();

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    if ((parent.engine != null) && (parent.engine.lattice != null)) {
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                FileOutputStream fos = new FileOutputStream(chooser.getSelectedFile());
                saveLattice(fos, parent.engine.lattice);
                fos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LatticeForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LatticeForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    if ((parent.engine != null) && (parent.engine.lattice != null)) {
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Lattice result = null;
            try {
                FileInputStream fis = new FileInputStream(chooser.getSelectedFile());
                result = loadLattice(fis);
                fis.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LatticeForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LatticeForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (result == null) {
                return;
            }
            if ((result.dims != parent.engine.lattice.dims) || (result.internalDims != parent.engine.lattice.internalDims)) {
                JOptionPane.showMessageDialog(null, "Dims do not match current engine settings!");
                return;
            }
            parent.engine.lattice = result;
            //TODO Fix the minor leftover traces of the previous lattice.
            parent.dp.repaint();
        }
    }
}//GEN-LAST:event_jMenuItem2ActionPerformed
    public static int VERSION = 2;

    public static void saveLattice(OutputStream os, Lattice lattice) {
        try {
            //Lattice lattice = parent.engine.lattice;

            DataOutputStream dos = new DataOutputStream(os);
            dos.writeInt(VERSION);
            dos.writeInt(lattice.dims);
            dos.writeInt(lattice.internalDims);
            HashMap<NFace, Integer> faceIDs = new HashMap<NFace, Integer>();
            HashMap<NPoint, Integer> pointIDs = new HashMap<NPoint, Integer>();
            HashMap<NCell, Integer> cellIDs = new HashMap<NCell, Integer>();
            HashMap<NBasis, Integer> basisIDs = new HashMap<NBasis, Integer>();
            HashMap<Matrix, Integer> matrixIDs = new HashMap<Matrix, Integer>();
            HashMap<NSurface, Integer> surfaceIDs = new HashMap<NSurface, Integer>();
            HashMap<Camera, Integer> cameraIDs = new HashMap<Camera, Integer>();
            
            faceIDs.put(null, -1);
            pointIDs.put(null, -1);
            cellIDs.put(null, -1);
            basisIDs.put(null, -1);
            matrixIDs.put(null, -1);
            surfaceIDs.put(null, -1);
            cameraIDs.put(null, -1);
            
            int faceId = 0;
            int pointId = 0;
            int cellId = 0;
            int basisId = 0;
            int matrixId = 0;
            int surfaceId = 0;
            int cameraId = 0;

            // Assign all ids.
            for (NFace f : lattice.faces) {
                f.id = faceId++;
                faceIDs.put(f, f.id);
                // This here should always be unnecessary - but I'm irritatingly careful.
                for (NPoint p : f.points) {
                    p.id = pointId++;
                    pointIDs.put(p, p.id);
                }
                if (f.cellA != null) {
                    f.cellA.id = cellId++;
                    cellIDs.put(f.cellA, f.cellA.id);
                }
                if (f.cellB != null) {
                    f.cellB.id = cellId++;
                    cellIDs.put(f.cellB, f.cellB.id);
                }
                if (f.basis != null) {
                    f.basis.id = basisId++;
                    basisIDs.put(f.basis, f.basis.id);
                    if (f.basis.basis != null) {
                        f.basis.basis.id = matrixId++;
                        matrixIDs.put(f.basis.basis, f.basis.basis.id);
                    }
                    if (f.basis.projection != null) {
                        f.basis.projection.id = matrixId++;
                        matrixIDs.put(f.basis.projection, f.basis.projection.id);
                    }
                }
            }
            for (NPoint p : lattice.points) {
                p.id = pointId++;
                pointIDs.put(p, p.id);
                // Unnecessary
                for (NFace f : p.faces) {
                    f.id = faceId++;
                    faceIDs.put(f, f.id);
                }
            }
            for (NCell c : lattice.cells) {
                c.id = cellId++;
                cellIDs.put(c, c.id);
                for (NFace f : c.faces) {
                    if (f != null) {
                        f.id = faceId++;
                        faceIDs.put(f, f.id);
                    }
                }
                for (NPoint p : c.points) {
                    if (p != null) {
                        p.id = pointId++;
                        pointIDs.put(p, p.id);
                    }
                }
                if (c.basis != null) {
                    c.basis.id = basisId++;
                    basisIDs.put(c.basis, c.basis.id);
                    if (c.basis.basis != null) {
                        c.basis.basis.id = matrixId++;
                        matrixIDs.put(c.basis.basis, c.basis.basis.id);
                    }
                    if (c.basis.projection != null) {
                        c.basis.projection.id = matrixId++;
                        matrixIDs.put(c.basis.projection, c.basis.projection.id);
                    }
                }
                for (NSurface s : c.surfaces) {
                    if (s != null) {
                        s.id = surfaceId++;
                        surfaceIDs.put(s, s.id);
                    }
                }
            }
            for (NSurface s : lattice.surfaces) {
                if (s != null) {
                    s.id = surfaceId++;
                    surfaceIDs.put(s, s.id);
                }
            }
            for (Camera c : lattice.cameras) {
                if (c != null) {
                    c.id = surfaceId++;
                    cameraIDs.put(c, c.id);
                    if (c.cell != null) {
                        c.cell.id = cellId++;
                        cellIDs.put(c.cell, c.cell.id);
                    }
                }
            }

            // Write everything.
            dos.writeInt(faceIDs.keySet().size() - 1);
            for (NFace f : faceIDs.keySet()) {
                if (f != null) {
                    f.calcBasis();
                    f.toBytes(dos);
                }
            }
            dos.writeInt(pointIDs.keySet().size() - 1);
            for (NPoint p : pointIDs.keySet()) {
                if (p != null) {
                    p.toBytes(dos);
                }
            }
            dos.writeInt(cellIDs.keySet().size() - 1);
            for (NCell c : cellIDs.keySet()) {
                if (c != null) {
                    c.toBytes(dos);
                }
            }
            dos.writeInt(basisIDs.keySet().size() - 1);
            for (NBasis b : basisIDs.keySet()) {
                if (b != null) {
                    b.toBytes(dos);
                }
            }
            dos.writeInt(matrixIDs.keySet().size() - 1);
            for (Matrix m : matrixIDs.keySet()) {
                if (m != null) {
                    m.toBytes(dos);
                }
            }
            dos.writeInt(surfaceIDs.keySet().size() - 1);
            for (NSurface s : surfaceIDs.keySet()) {
                if (s != null) {
                    s.toBytes(dos);
                }
            }
            dos.writeInt(cameraIDs.keySet().size() - 1);
            for (Camera c : cameraIDs.keySet()) {
                if (c != null) {
                    c.toBytes(dos);
                }
            }

            dos.writeInt(lattice.cells.size());
            for (int i = 0; i < lattice.cells.size(); i++) {
                dos.writeInt(cellIDs.get(lattice.cells.get(i)));
            }
            dos.writeInt(lattice.faces.size());
            for (int i = 0; i < lattice.faces.size(); i++) {
                dos.writeInt(faceIDs.get(lattice.faces.get(i)));
            }
            dos.writeInt(lattice.incompleteFaces.size());
            for (int i = 0; i < lattice.incompleteFaces.size(); i++) {
                dos.writeInt(faceIDs.get(lattice.incompleteFaces.get(i)));
            }
            dos.writeInt(lattice.points.size());
            for (int i = 0; i < lattice.points.size(); i++) {
                dos.writeInt(pointIDs.get(lattice.points.get(i)));
            }
            dos.writeInt(lattice.surfaces.size());
            for (int i = 0; i < lattice.surfaces.size(); i++) {
                dos.writeInt(surfaceIDs.get(lattice.surfaces.get(i)));
            }
            dos.writeInt(lattice.cameras.size());
            for (int i = 0; i < lattice.cameras.size(); i++) {
                dos.writeInt(cameraIDs.get(lattice.cameras.get(i)));
            }

            dos.flush();
            //dos.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "IO error or something.");
            Logger.getLogger(SkeletonForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IO error.");
            Logger.getLogger(SkeletonForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static Lattice loadLattice(InputStream is) {
        Lattice lattice = null;
        try {
            DataInputStream dis = new DataInputStream(is);
            int version = dis.readInt();
            switch (version) {
                case 1: {
                    int dims = dis.readInt();
                    int internalDims = dis.readInt();
                    lattice = new Lattice(dims, internalDims);
                    HashMap<Integer, NFace> faceIDs = new HashMap<Integer, NFace>();
                    HashMap<Integer, NPoint> pointIDs = new HashMap<Integer, NPoint>();
                    HashMap<Integer, NCell> cellIDs = new HashMap<Integer, NCell>();
                    HashMap<Integer, NBasis> basisIDs = new HashMap<Integer, NBasis>();
                    HashMap<Integer, Matrix> matrixIDs = new HashMap<Integer, Matrix>();
                    faceIDs.put(-1, null);
                    pointIDs.put(-1, null);
                    cellIDs.put(-1, null);
                    basisIDs.put(-1, null);
                    matrixIDs.put(-1, null);

                    int facesCount = dis.readInt();
                    for (int i = 0; i < facesCount; i++) {
                        NFace f = (NFace) NFace.fromBytes(dis);
                        faceIDs.put(f.id, f);
                    }
                    int pointCount = dis.readInt();
                    for (int i = 0; i < pointCount; i++) {
                        NPoint p = (NPoint) NPoint.fromBytes(dis);
                        pointIDs.put(p.id, p);
                    }
                    int cellCount = dis.readInt();
                    for (int i = 0; i < cellCount; i++) {
                        NCell c = (NCell) NCell.fromBytes(dis);
                        cellIDs.put(c.id, c);
                    }
                    int basisCount = dis.readInt();
                    for (int i = 0; i < basisCount; i++) {
                        NBasis b = (NBasis) NBasis.fromBytes(dis);
                        basisIDs.put(b.id, b);
                    }
                    int matrixCount = dis.readInt();
                    for (int i = 0; i < matrixCount; i++) {
                        Matrix m = (Matrix) Matrix.fromBytes(dis);
                        matrixIDs.put(m.id, m);
                    }

                    for (NFace f : faceIDs.values()) {
                        if (f != null) {
                            f.cellA = cellIDs.get(f.cellAid);
                            f.cellB = cellIDs.get(f.cellBid);
                            for (int i = 0; i < f.pointIDs.size(); i++) {
                                f.points[i] = pointIDs.get(f.pointIDs.get(i));
                            }
                        }
                    }
                    for (NPoint p : pointIDs.values()) {
                        if (p != null) {
                            for (int i = 0; i < p.faceIDs.size(); i++) {
                                p.faces.add(faceIDs.get(p.faceIDs.get(i)));
                            }
                        }
                    }
                    for (NCell c : cellIDs.values()) {
                        if (c != null) {
                            c.basis = basisIDs.get(c.basisId);
                            for (int i = 0; i < c.faceIDs.size(); i++) {
                                c.faces[i] = faceIDs.get(c.faceIDs.get(i));
                            }
                            for (int i = 0; i < c.pointIDs.size(); i++) {
                                c.points[i] = pointIDs.get(c.pointIDs.get(i));
                            }
                        }
                    }
                    for (NBasis b : basisIDs.values()) {
                        if (b != null) {
                            b.basis = matrixIDs.get(b.basisId);
                            b.projection = matrixIDs.get(b.projectionId);
                        }
                    }
//                    for (Matrix m : matrixIDs.values()) {
//                        if (m != null) {
//                            // Nothing to see, nothing to see.
//                        }
//                    }

                    cellCount = dis.readInt();
                    for (int i = 0; i < cellCount; i++) {
                        lattice.cells.add(cellIDs.get(dis.readInt()));
                    }
                    facesCount = dis.readInt();
                    for (int i = 0; i < facesCount; i++) {
                        lattice.faces.add(faceIDs.get(dis.readInt()));
                    }
                    int incompleteFacesCount = dis.readInt();
                    for (int i = 0; i < incompleteFacesCount; i++) {
                        lattice.incompleteFaces.add(faceIDs.get(dis.readInt()));
                    }
                    pointCount = dis.readInt();
                    for (int i = 0; i < pointCount; i++) {
                        lattice.points.add(pointIDs.get(dis.readInt()));
                    }
                }
                break;
                case 2: {
                    int dims = dis.readInt();
                    int internalDims = dis.readInt();
                    lattice = new Lattice(dims, internalDims);
                    HashMap<Integer, NFace> faceIDs = new HashMap<Integer, NFace>();
                    HashMap<Integer, NPoint> pointIDs = new HashMap<Integer, NPoint>();
                    HashMap<Integer, NCell> cellIDs = new HashMap<Integer, NCell>();
                    HashMap<Integer, NBasis> basisIDs = new HashMap<Integer, NBasis>();
                    HashMap<Integer, Matrix> matrixIDs = new HashMap<Integer, Matrix>();
                    HashMap<Integer, NSurface> surfaceIDs = new HashMap<Integer, NSurface>();
                    HashMap<Integer, Camera> cameraIDs = new HashMap<Integer, Camera>();

                    faceIDs.put(-1, null);
                    pointIDs.put(-1, null);
                    cellIDs.put(-1, null);
                    basisIDs.put(-1, null);
                    matrixIDs.put(-1, null);
                    surfaceIDs.put(-1, null);
                    cameraIDs.put(-1, null);

                    int facesCount = dis.readInt();
                    for (int i = 0; i < facesCount; i++) {
                        NFace f = (NFace) NFace.fromBytes(dis);
                        faceIDs.put(f.id, f);
                    }
                    int pointCount = dis.readInt();
                    for (int i = 0; i < pointCount; i++) {
                        NPoint p = (NPoint) NPoint.fromBytes(dis);
                        pointIDs.put(p.id, p);
                    }
                    int cellCount = dis.readInt();
                    for (int i = 0; i < cellCount; i++) {
                        NCell c = (NCell) NCell.fromBytes(dis);
                        cellIDs.put(c.id, c);
                    }
                    int basisCount = dis.readInt();
                    for (int i = 0; i < basisCount; i++) {
                        NBasis b = (NBasis) NBasis.fromBytes(dis);
                        basisIDs.put(b.id, b);
                    }
                    int matrixCount = dis.readInt();
                    for (int i = 0; i < matrixCount; i++) {
                        Matrix m = (Matrix) Matrix.fromBytes(dis);
                        matrixIDs.put(m.id, m);
                    }
                    int surfaceCount = dis.readInt();
                    for (int i = 0; i < surfaceCount; i++) {
                        NSurface s = (NSurface) NSurface.fromBytes(dis);
                        surfaceIDs.put(s.id, s);
                    }
                    int cameraCount = dis.readInt();
                    for (int i = 0; i < cameraCount; i++) {
                        Camera c = (Camera) Camera.fromBytes(dis, lattice);
                        cameraIDs.put(c.id, c);
                    }

                    for (NFace f : faceIDs.values()) {
                        if (f != null) {
                            f.cellA = cellIDs.get(f.cellAid);
                            f.cellB = cellIDs.get(f.cellBid);
                            for (int i = 0; i < f.pointIDs.size(); i++) {
                                f.points[i] = pointIDs.get(f.pointIDs.get(i));
                            }
                            f.basis = basisIDs.get(f.basisId);
                        }
                    }
                    for (NPoint p : pointIDs.values()) {
                        if (p != null) {
                            for (int i = 0; i < p.faceIDs.size(); i++) {
                                p.faces.add(faceIDs.get(p.faceIDs.get(i)));
                            }
                        }
                    }
                    for (NCell c : cellIDs.values()) {
                        if (c != null) {
                            c.basis = basisIDs.get(c.basisId);
                            for (int i = 0; i < c.faceIDs.size(); i++) {
                                c.faces[i] = faceIDs.get(c.faceIDs.get(i));
                            }
                            for (int i = 0; i < c.pointIDs.size(); i++) {
                                c.points[i] = pointIDs.get(c.pointIDs.get(i));
                            }
                            for (int i = 0; i < c.surfaceIDs.size(); i++) {
                                c.surfaces.add(surfaceIDs.get(c.surfaceIDs.get(i)));
                            }
                        }
                    }
                    for (NBasis b : basisIDs.values()) {
                        if (b != null) {
                            b.basis = matrixIDs.get(b.basisId);
                            b.projection = matrixIDs.get(b.projectionId);
                        }
                    }
//                    for (Matrix m : matrixIDs.values()) {
//                        if (m != null) {
//                            // Nothing to see, nothing to see.
//                        }
//                    }
//                    for (NSurface s : surfaceIDs.values()) {
//                        if (s != null) {
//                            // Nothing to see, nothing to see.
//                        }
//                    }
                    for (Camera c : cameraIDs.values()) {
                        if (c != null) {
                            c.cell = cellIDs.get(c.cellId);
                        }
                    }

                    cellCount = dis.readInt();
                    for (int i = 0; i < cellCount; i++) {
                        lattice.cells.add(cellIDs.get(dis.readInt()));
                    }
                    facesCount = dis.readInt();
                    for (int i = 0; i < facesCount; i++) {
                        lattice.faces.add(faceIDs.get(dis.readInt()));
                    }
                    int incompleteFacesCount = dis.readInt();
                    for (int i = 0; i < incompleteFacesCount; i++) {
                        lattice.incompleteFaces.add(faceIDs.get(dis.readInt()));
                    }
                    pointCount = dis.readInt();
                    for (int i = 0; i < pointCount; i++) {
                        lattice.points.add(pointIDs.get(dis.readInt()));
                    }
                    surfaceCount = dis.readInt();
                    for (int i = 0; i < surfaceCount; i++) {
                        lattice.surfaces.add(surfaceIDs.get(dis.readInt()));
                    }
                    cameraCount = dis.readInt();
                    for (int i = 0; i < cameraCount; i++) {
                        lattice.cameras.add(cameraIDs.get(dis.readInt()));
                    }

                }
                break;
                default:
                    JOptionPane.showMessageDialog(null, "Version not recognized: " + version);
                    break;
            }
            //dis.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File not found.");
            Logger.getLogger(SkeletonForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IO error.");
            Logger.getLogger(SkeletonForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lattice;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LatticeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LatticeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LatticeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LatticeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LatticeForm(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearSelections;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList listCells;
    private javax.swing.JList listFaces;
    private javax.swing.JList listIncompleteFaces;
    private javax.swing.JList listPoints;
    // End of variables declaration//GEN-END:variables
}
