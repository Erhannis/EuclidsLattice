/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DistributedComputingForm.java
 *
 * Created on Feb 11, 2012, 11:04:57 AM
 */
package latticetestwork;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Matthew Ewer <Ewer.Matthew@gmail.com>
 */
public class DistributedComputingForm extends javax.swing.JFrame {

    public LatticeTestworkView parent = null;
    public MobBoss mobBoss = null;
    
    /** Creates new form DistributedComputingForm */
    public DistributedComputingForm(LatticeTestworkView parent) {
        this.parent = parent;
        initComponents();
        if (parent.mobBoss == null) {
            if (parent.engine != null) {
                parent.mobBoss = new MobBoss(parent.engine.lattice);
            } else {
                parent.mobBoss = new MobBoss(null);
            }
        }
        mobBoss = this.parent.mobBoss;
        boxDCEnabled.setSelected(parent.distributeComputing);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        editAddress = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        spinPort = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableWorkers = new javax.swing.JTable();
        btnPoll = new javax.swing.JButton();
        boxDCEnabled = new javax.swing.JCheckBox();
        btnLaunchLocal = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(latticetestwork.LatticeTestworkApp.class).getContext().getResourceMap(DistributedComputingForm.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        editAddress.setText(resourceMap.getString("editAddress.text")); // NOI18N
        editAddress.setToolTipText(resourceMap.getString("editAddress.toolTipText")); // NOI18N
        editAddress.setName("editAddress"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), editAddress, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnConnect.setText(resourceMap.getString("btnConnect.text")); // NOI18N
        btnConnect.setName("btnConnect"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnConnect, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        spinPort.setToolTipText(resourceMap.getString("spinPort.toolTipText")); // NOI18N
        spinPort.setName("spinPort"); // NOI18N
        spinPort.setValue(10700);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinPort, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jScrollPane1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        tableWorkers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Port", "Status", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableWorkers.setName("tableWorkers"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), tableWorkers, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tableWorkers);
        tableWorkers.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title0")); // NOI18N
        tableWorkers.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title1")); // NOI18N
        tableWorkers.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title2")); // NOI18N
        tableWorkers.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title3")); // NOI18N

        btnPoll.setText(resourceMap.getString("btnPoll.text")); // NOI18N
        btnPoll.setToolTipText(resourceMap.getString("btnPoll.toolTipText")); // NOI18N
        btnPoll.setName("btnPoll"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnPoll, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnPoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPollActionPerformed(evt);
            }
        });

        boxDCEnabled.setText(resourceMap.getString("boxDCEnabled.text")); // NOI18N
        boxDCEnabled.setName("boxDCEnabled"); // NOI18N
        boxDCEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxDCEnabledActionPerformed(evt);
            }
        });

        btnLaunchLocal.setText(resourceMap.getString("btnLaunchLocal.text")); // NOI18N
        btnLaunchLocal.setName("btnLaunchLocal"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnLaunchLocal, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnLaunchLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchLocalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxDCEnabled)
                        .addGap(305, 305, 305)
                        .addComponent(btnLaunchLocal))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConnect, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPoll, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDCEnabled)
                    .addComponent(btnLaunchLocal))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect)
                    .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPoll)
                        .addGap(252, 252, 252))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boxDCEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxDCEnabledActionPerformed
        parent.distributeComputing = boxDCEnabled.isSelected();
    }//GEN-LAST:event_boxDCEnabledActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            RemoteWorkerIcon worker = mobBoss.recruitWorker(editAddress.getText(), (Integer)spinPort.getValue());
            if (worker != null) {
                ((javax.swing.table.DefaultTableModel)tableWorkers.getModel()).addRow(new Object[]{worker.address, worker.port, RemoteWorker.statusCodeToString(worker.status), worker.lastMessage});
            } else {
                JOptionPane.showMessageDialog(this, "Worker not found.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Host address unknown.", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "IO error.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    public int openport = 11700;
    
    private void btnLaunchLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchLocalActionPerformed
        try {
            new Thread(new Runnable(){
                public void run() {
                    try {
                        new RemoteWorker(new String[]{Integer.toString(openport)});
                    } catch (IOException ex) {
                        Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }).start();

            RemoteWorkerIcon worker = mobBoss.recruitWorker("localhost", openport);
            if (worker != null) {
                ((javax.swing.table.DefaultTableModel)tableWorkers.getModel()).addRow(new Object[]{worker.address, worker.port, RemoteWorker.statusCodeToString(worker.status), worker.lastMessage});
                openport++;
            } else {
                JOptionPane.showMessageDialog(this, "Worker not found.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Host address unknown.", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "IO error.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLaunchLocalActionPerformed

    private void btnPollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPollActionPerformed
        //TODO For now, this is a testing button.
        RemoteWorkerIcon w = mobBoss.workers.get(0);
        try {
            w.dos.writeInt(RemoteWorker.BOSS_QUERY);
            w.dos.flush();
            System.out.println("Response: " + w.dis.readInt());
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPollActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DistributedComputingForm(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxDCEnabled;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnLaunchLocal;
    private javax.swing.JButton btnPoll;
    private javax.swing.JTextField editAddress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinPort;
    private javax.swing.JTable tableWorkers;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
