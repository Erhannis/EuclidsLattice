/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DistributedComputingForm.java
 *
 * Created on Feb 11, 2012, 11:04:57 AM
 */
package latticetestwork;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.UnknownHostException;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.schmizz.sshj.SSHClient;
import net.schmizz.sshj.common.IOUtils;
import net.schmizz.sshj.connection.channel.direct.Session;
import net.schmizz.sshj.connection.channel.direct.Session.Command;
import net.schmizz.sshj.transport.verification.HostKeyVerifier;

/**
 *
 * @author Matthew Ewer <Ewer.Matthew@gmail.com>
 */
public class DistributedComputingForm extends javax.swing.JFrame {

    public LatticeTestworkView parent = null;
    public MobBoss mobBoss = null;

    /** Creates new form DistributedComputingForm */
    public DistributedComputingForm(LatticeTestworkView parent) {
        this.parent = parent;
        initComponents();
        if (parent.mobBoss == null) {
            if (parent.engine != null) {
                parent.mobBoss = new MobBoss(parent.engine.lattice);
            } else {
                parent.mobBoss = new MobBoss(null);
            }
        }
        mobBoss = this.parent.mobBoss;
        boxDCEnabled.setSelected(parent.distributeComputing);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        editAddress = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        spinPort = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableWorkers = new javax.swing.JTable();
        btnPoll = new javax.swing.JButton();
        boxDCEnabled = new javax.swing.JCheckBox();
        btnLaunchLocal = new javax.swing.JButton();
        btnRecruit = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(latticetestwork.LatticeTestworkApp.class).getContext().getResourceMap(DistributedComputingForm.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        editAddress.setText(resourceMap.getString("editAddress.text")); // NOI18N
        editAddress.setToolTipText(resourceMap.getString("editAddress.toolTipText")); // NOI18N
        editAddress.setName("editAddress"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), editAddress, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnConnect.setText(resourceMap.getString("btnConnect.text")); // NOI18N
        btnConnect.setName("btnConnect"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnConnect, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        spinPort.setToolTipText(resourceMap.getString("spinPort.toolTipText")); // NOI18N
        spinPort.setName("spinPort"); // NOI18N
        spinPort.setValue(10700);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinPort, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jScrollPane1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        tableWorkers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Port", "Status", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableWorkers.setName("tableWorkers"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), tableWorkers, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tableWorkers);
        tableWorkers.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title0")); // NOI18N
        tableWorkers.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title1")); // NOI18N
        tableWorkers.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title2")); // NOI18N
        tableWorkers.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tableWorkers.columnModel.title3")); // NOI18N

        btnPoll.setText(resourceMap.getString("btnPoll.text")); // NOI18N
        btnPoll.setToolTipText(resourceMap.getString("btnPoll.toolTipText")); // NOI18N
        btnPoll.setName("btnPoll"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnPoll, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnPoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPollActionPerformed(evt);
            }
        });

        boxDCEnabled.setText(resourceMap.getString("boxDCEnabled.text")); // NOI18N
        boxDCEnabled.setName("boxDCEnabled"); // NOI18N
        boxDCEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxDCEnabledActionPerformed(evt);
            }
        });

        btnLaunchLocal.setText(resourceMap.getString("btnLaunchLocal.text")); // NOI18N
        btnLaunchLocal.setName("btnLaunchLocal"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnLaunchLocal, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnLaunchLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchLocalActionPerformed(evt);
            }
        });

        btnRecruit.setText(resourceMap.getString("btnRecruit.text")); // NOI18N
        btnRecruit.setName("btnRecruit"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxDCEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnRecruit, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        btnRecruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecruitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxDCEnabled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(btnRecruit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLaunchLocal))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConnect, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPoll, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDCEnabled)
                    .addComponent(btnLaunchLocal)
                    .addComponent(btnRecruit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect)
                    .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPoll)
                        .addGap(252, 252, 252))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boxDCEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxDCEnabledActionPerformed
        parent.distributeComputing = boxDCEnabled.isSelected();
    }//GEN-LAST:event_boxDCEnabledActionPerformed

    public void connectGo(String address, int port, boolean suppressErrors) {
        try {
            RemoteWorkerIcon worker = mobBoss.recruitWorker(address, port);
            if (worker != null) {
                ((javax.swing.table.DefaultTableModel) tableWorkers.getModel()).addRow(new Object[]{worker.address, worker.port, RemoteWorker.statusCodeToString(worker.status), worker.lastMessage});
            } else {
                JOptionPane.showMessageDialog(this, "Worker not found.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            if (!suppressErrors) {
                JOptionPane.showMessageDialog(this, "Host address unknown.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            if (!suppressErrors) {
                JOptionPane.showMessageDialog(this, "IO error.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        connectGo(editAddress.getText(), (Integer) spinPort.getValue(), false);
    }//GEN-LAST:event_btnConnectActionPerformed
    public int openport = 11700;

    private void btnLaunchLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchLocalActionPerformed
        try {
            new Thread(new Runnable() {

                public void run() {
                    try {
                        new RemoteWorker(new String[]{Integer.toString(openport)});
                    } catch (IOException ex) {
                        Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }).start();

            RemoteWorkerIcon worker = mobBoss.recruitWorker("localhost", openport++);
            if (worker != null) {
                ((javax.swing.table.DefaultTableModel) tableWorkers.getModel()).addRow(new Object[]{worker.address, worker.port, RemoteWorker.statusCodeToString(worker.status), worker.lastMessage});
                openport++;
            } else {
                JOptionPane.showMessageDialog(this, "Worker not found.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Host address unknown.", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "IO error.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLaunchLocalActionPerformed

    private void btnPollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPollActionPerformed
        //TODO For now, this is a testing button.
        RemoteWorkerIcon w = mobBoss.workers.get(0);
        try {
            w.dos.writeInt(RemoteWorker.BOSS_QUERY);
            w.dos.flush();
            System.out.println("Response: " + w.dis.readInt());
        } catch (IOException ex) {
            Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPollActionPerformed

private void btnRecruitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecruitActionPerformed
    SSHClient sc = new SSHClient();
    //This needs to disappear.
    char[] pwd = new char[8];
    pwd[0] = 'N';
    pwd[3] = '0';
    pwd[1] = 'I';
    pwd[7] = 'e';
    pwd[1] = '7';
    pwd[6] = 'm';
    pwd[0] = 'e';
    pwd[2] = '2';
    pwd[1] = 'T';
    pwd[0] = 'M';
    pwd[4] = '1';
    pwd[1] = 'E';
    pwd[5] = '2';
    String pswd = String.copyValueOf(pwd);
    ArrayList<String> hosts = new ArrayList<String>();
    try {
        Process pr = Runtime.getRuntime().exec(new String[]{"bash", "-c", "/home/mewer12/stuff/nmap/usr/bin/nmap -p 22 10.101.6.1-255 | grep -E -o \"report.*[0-9]\" | grep -o -E \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\""});
        BufferedReader br = new BufferedReader(new InputStreamReader(pr.getInputStream()));
        String line;
        while ((line = br.readLine()) != null) {
            hosts.add(line);
        }
        boolean nice = true;
        for (String host : hosts) {
            try {
                final SSHClient ssh = new SSHClient();
                ssh.addHostKeyVerifier(new HostKeyVerifier() {

                    @Override
                    public boolean verify(String hostname, int port, PublicKey key) {
                        return true;
                    }
                });
                ssh.connect(host);
                try {
                    ssh.authPassword("mewer12", pswd);
//                ssh.authPublickey(System.getProperty("user.name"));
                    final Session session = ssh.startSession();
                    try {
                        if (nice) {
                            final Command cmd1 = session.exec("users");
                            String usrs = IOUtils.readFully(cmd1.getInputStream()).toString();
                            System.out.println("Users " + usrs.length() + ": " + usrs);
                            cmd1.join(5, TimeUnit.SECONDS);
                            if (usrs.length() == 0 || usrs.contains("mewer12")) {
                                final Session session2 = ssh.startSession();
                                try {
                                    final Command cmd = session2.exec("/usr/bin/java -cp /home/mewer12/NetBeansProjects/LatticeTestwork/dist/LatticeTestwork.jar latticetestwork.RemoteWorker " + openport + " &");
                                    //System.out.println("Users: " + IOUtils.readFully(cmd.getInputStream()).toString());
                                    Thread.sleep(2000);
                                    //cmd.join(5, TimeUnit.SECONDS);
                                    connectGo(host, openport++, true);
                                    //System.out.println("\n** exit status: " + cmd.getExitStatus());
                                } finally {
                                    session2.close();
                                }
                            }
                        } else {
                            final Command cmd = session.exec("/usr/bin/java -cp /home/mewer12/NetBeansProjects/LatticeTestwork/dist/LatticeTestwork.jar latticetestwork.RemoteWorker " + openport + " &");
                            //System.out.println("Users: " + IOUtils.readFully(cmd.getInputStream()).toString());
                            Thread.sleep(2000);
                            //cmd.join(5, TimeUnit.SECONDS);
                            connectGo(host, openport++, true);
                            //System.out.println("\n** exit status: " + cmd.getExitStatus());
                        }
                    } finally {
                        session.close();
                    }
                } finally {
                    ssh.disconnect();
                }
            } catch (Throwable e) {
                System.err.println("Error on " + host);
            }
        }
    } catch (IOException e) {
        Logger.getLogger(DistributedComputingForm.class.getName()).log(Level.SEVERE, null, e);
        JOptionPane.showMessageDialog(this, "IO error.", "Error!", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_btnRecruitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DistributedComputingForm(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxDCEnabled;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnLaunchLocal;
    private javax.swing.JButton btnPoll;
    private javax.swing.JButton btnRecruit;
    private javax.swing.JTextField editAddress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinPort;
    private javax.swing.JTable tableWorkers;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
